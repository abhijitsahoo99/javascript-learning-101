###JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, 
Adobe Acrobat. JavaScript is a **prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, 
imperative, and declarative (e.g. functional programming) styles.**
Alt-H2
just-in-time(JIT) - JavaScript is an interpreted programming language, meaning that the code is executed by an interpreter line by line,
translating and executing each statement as it encounters them. This approach provides flexibility but can be slower compared to 
languages that are compiled ahead of time.
However, modern JavaScript engines, such as V8 (used in Google Chrome) or SpiderMonkey (used in Mozilla Firefox), employ a JIT compiler 
to optimize the execution of JavaScript code. The JIT compiler dynamically compiles parts of the JavaScript code into a more efficient 
machine code just before it is executed. This contrasts with traditional interpreters, which directly interpret the source code without 
any intermediate compilation step.
The JIT compilation process allows JavaScript engines to strike a balance between the flexibility of an interpreted language and the
performance of a compiled language. By dynamically compiling and optimizing the code, JIT engines can significantly speed up JavaScript
execution, making it comparable to or even faster than some traditionally compiled languages in certain scenarios.

Prototype-based programming - It is a style of object-oriented programming in which classes are not explicitly defined, but rather 
derived by adding properties and methods to an instance of another class or, less frequently, adding them to an empty object.
In simple words: this type of style allows the creation of an object without first defining its class.

Multi-paradigm - When we say that JavaScript is a multi-paradigm programming language, it means that JavaScript supports and allows 
developers to use different programming paradigms or styles of programming within the same language. Rather than being limited to a
single approach, JavaScript provides the flexibility to combine and use multiple paradigms based on the specific needs of a project.

single-threaded - When we say that JavaScript is single-threaded, it means that JavaScript code is executed in a single sequence of 
instructions, one at a time, in a single thread of execution. In simpler terms, JavaScript can only perform one operation at a time.
In a single-threaded environment, each operation must complete before the next one can start. If a particular operation takes a long 
time to execute, it can block the execution of subsequent operations, causing delays or unresponsiveness in the application.

Dynamic language - It means JavaScript provides flexibility and allows for runtime changes to the structure and behavior of objects
and code. 
Here are some key aspects that contribute to JavaScript's dynamic nature:
1. Dynamic typing - JavaScript uses dynamic typing, which means that variable types are determined and enforced at runtime rather
than being explicitly declared. We don't need to provide what type of variables we need to declare beforehand. 
2. Object flexibility - JavaScript allows objects to be modified dynamically, even after they have been created. You can add, remove, 
or modify properties and methods of an object on the fly, without having to define a rigid class structure upfront. 
3. Late binding - JavaScript employs late binding, also known as dynamic binding or runtime binding. This means that the resolution of 
method calls and variable references is determined during runtime based on the current state of the program. 

Imperative Programming -Imperative programming is a programming paradigm that focuses on describing how a program should achieve a 
particular result. It emphasizes giving explicit instructions and commands to the computer, specifying each step in a sequential manner.
In JavaScript, you can write code imperatively by using statements and control structures such as loops, conditionals, and function calls. 

Declarative Programming - Declarative programming, on the other hand, focuses on describing what a program should achieve without
specifying the exact steps or procedures to reach that outcome. It emphasizes expressing the desired result or goal rather than 
describing the detailed algorithmic steps.
Declarative programming in JavaScript often involves working with functions that operate on collections of data, using array methods 
like map, filter, and reduce. Instead of explicitly specifying the steps to perform, you define the desired transformation or 
computation and let the underlying methods handle the iteration and processing of the data.
